name: build

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3.4.0

      # Install .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
          
      # Restore Dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Check Vulnerable Nuget Packages - Simple Solution
      - name: Checking Vulnerable Nuget Packages - Simple
        run: |
          dotnet list package --vulnerable --include-transitive --format=json > list.json
          if jq -cre '.projects | .. | .severity? // empty | select(test("Critical"))' list.json; then
            echo 'Vulnerabilities found! Exiting...'
            jq . list.json
            exit 1
          else
            echo 'No vulnerabilities found!'
          fi
        
      # Check Vulnerable Nuget Packages
      - name: Checking Vulnerable Nuget Packages
        run: |
          dotnet list package --vulnerable --include-transitive --format json 2>&1 | tee build.log
          # Check if the "projects" node exists in the JSON
          if jq -e 'has("projects")' build.log >/dev/null; then
              echo "Project Exists"
              # Check if frameworks exist and contain either topLevelPackages or transitivePackages
              if jq -e '.projects[] | select(has("frameworks") and (.frameworks[] | has("topLevelPackages") or has("transitivePackages")))' build.log >/dev/null; then
                  # Check for vulnerabilities with severity "Critical" in topLevelPackages and transitivePackages arrays
                  if jq -e '.projects[] |
                             .frameworks[].topLevelPackages[]?.vulnerabilities[]? |
                             select(.severity == "Critical") or . / .frameworks[].transitivePackages[]?.vulnerabilities[]? |
                             select(.severity == "Critical")' build.log >/dev/null; then
                      exit 1
                  else
                      echo "No vulnerabilities found"
                      exit 0
                  fi
              else
                  echo "No frameworks with packages found in build.log"
                  exit 0
              fi
          else
              echo "No projects found in build.log"
              exit 0
          fi
